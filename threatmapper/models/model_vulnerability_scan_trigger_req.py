from typing import TYPE_CHECKING, Any, Dict, List, Optional, Type, TypeVar, Union

from attrs import define as _attrs_define
from attrs import field as _attrs_field

from ..types import UNSET, Unset

if TYPE_CHECKING:
    from ..models.model_node_identifier import ModelNodeIdentifier
    from ..models.model_scan_filter import ModelScanFilter
    from ..models.model_vulnerability_scan_config_language import ModelVulnerabilityScanConfigLanguage


T = TypeVar("T", bound="ModelVulnerabilityScanTriggerReq")


@_attrs_define
class ModelVulnerabilityScanTriggerReq:
    """
    Example:
        {'is_priority': True, 'scan_config': [{'language': 'base'}, {'language': 'base'}], 'filters':
            {'container_scan_filter': {'filter_in': {'key': ['', '']}}, 'cloud_account_scan_filter': {'filter_in': {'key':
            ['', '']}}, 'image_scan_filter': {'filter_in': {'key': ['', '']}}, 'kubernetes_cluster_scan_filter':
            {'filter_in': {'key': ['', '']}}, 'host_scan_filter': {'filter_in': {'key': ['', '']}}}, 'node_ids':
            [{'node_type': 'image', 'node_id': 'node_id'}, {'node_type': 'image', 'node_id': 'node_id'}]}

    Attributes:
        filters (ModelScanFilter):  Example: {'container_scan_filter': {'filter_in': {'key': ['', '']}},
            'cloud_account_scan_filter': {'filter_in': {'key': ['', '']}}, 'image_scan_filter': {'filter_in': {'key': ['',
            '']}}, 'kubernetes_cluster_scan_filter': {'filter_in': {'key': ['', '']}}, 'host_scan_filter': {'filter_in':
            {'key': ['', '']}}}.
        is_priority (Union[Unset, bool]):
        node_ids (Optional[List['ModelNodeIdentifier']]):
        scan_config (Optional[List['ModelVulnerabilityScanConfigLanguage']]):
    """

    filters: "ModelScanFilter"
    node_ids: Optional[List["ModelNodeIdentifier"]]
    scan_config: Optional[List["ModelVulnerabilityScanConfigLanguage"]]
    is_priority: Union[Unset, bool] = UNSET
    additional_properties: Dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> Dict[str, Any]:
        filters = self.filters.to_dict()

        is_priority = self.is_priority
        if self.node_ids is None:
            node_ids = None
        else:
            node_ids = []
            for node_ids_item_data in self.node_ids:
                node_ids_item = node_ids_item_data.to_dict()

                node_ids.append(node_ids_item)

        if self.scan_config is None:
            scan_config = None
        else:
            scan_config = []
            for scan_config_item_data in self.scan_config:
                scan_config_item = scan_config_item_data.to_dict()

                scan_config.append(scan_config_item)

        field_dict: Dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update(
            {
                "filters": filters,
                "node_ids": node_ids,
                "scan_config": scan_config,
            }
        )
        if is_priority is not UNSET:
            field_dict["is_priority"] = is_priority

        return field_dict

    @classmethod
    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -> T:
        from ..models.model_node_identifier import ModelNodeIdentifier
        from ..models.model_scan_filter import ModelScanFilter
        from ..models.model_vulnerability_scan_config_language import ModelVulnerabilityScanConfigLanguage

        d = src_dict.copy()
        filters = ModelScanFilter.from_dict(d.pop("filters"))

        is_priority = d.pop("is_priority", UNSET)

        node_ids = []
        _node_ids = d.pop("node_ids")
        for node_ids_item_data in _node_ids or []:
            node_ids_item = ModelNodeIdentifier.from_dict(node_ids_item_data)

            node_ids.append(node_ids_item)

        scan_config = []
        _scan_config = d.pop("scan_config")
        for scan_config_item_data in _scan_config or []:
            scan_config_item = ModelVulnerabilityScanConfigLanguage.from_dict(scan_config_item_data)

            scan_config.append(scan_config_item)

        model_vulnerability_scan_trigger_req = cls(
            filters=filters,
            is_priority=is_priority,
            node_ids=node_ids,
            scan_config=scan_config,
        )

        model_vulnerability_scan_trigger_req.additional_properties = d
        return model_vulnerability_scan_trigger_req

    @property
    def additional_keys(self) -> List[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
