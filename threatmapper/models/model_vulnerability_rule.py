from typing import Any, Dict, List, Optional, Type, TypeVar, Union, cast

from attrs import define as _attrs_define
from attrs import field as _attrs_field

from ..types import UNSET, Unset

T = TypeVar("T", bound="ModelVulnerabilityRule")


@_attrs_define
class ModelVulnerabilityRule:
    """
    Example:
        {'parsed_attack_vector': 'parsed_attack_vector', 'masked': True, 'cve_description': 'cve_description',
            'cve_overall_score': 6.027456183070403, 'resources': ['resources', 'resources'], 'cve_attack_vector':
            'cve_attack_vector', 'cve_cvss_score': 0.8008281904610115, 'urls': ['', ''], 'cve_severity': 'cve_severity',
            'updated_at': 1, 'cve_id': 'cve_id', 'exploit_poc': 'exploit_poc', 'cve_type': 'cve_type', 'cve_fixed_in':
            'cve_fixed_in', 'cve_link': 'cve_link', 'node_id': 'node_id'}

    Attributes:
        cve_attack_vector (str):
        cve_cvss_score (float):
        cve_description (str):
        cve_fixed_in (str):
        cve_id (str):
        cve_link (str):
        cve_overall_score (float):
        cve_severity (str):
        cve_type (str):
        exploit_poc (str):
        masked (bool):
        node_id (str):
        parsed_attack_vector (str):
        updated_at (int):
        resources (Union[Unset, None, List[str]]):
        urls (Optional[List[Any]]):
    """

    cve_attack_vector: str
    cve_cvss_score: float
    cve_description: str
    cve_fixed_in: str
    cve_id: str
    cve_link: str
    cve_overall_score: float
    cve_severity: str
    cve_type: str
    exploit_poc: str
    masked: bool
    node_id: str
    parsed_attack_vector: str
    updated_at: int
    urls: Optional[List[Any]]
    resources: Union[Unset, None, List[str]] = UNSET
    additional_properties: Dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> Dict[str, Any]:
        cve_attack_vector = self.cve_attack_vector
        cve_cvss_score = self.cve_cvss_score
        cve_description = self.cve_description
        cve_fixed_in = self.cve_fixed_in
        cve_id = self.cve_id
        cve_link = self.cve_link
        cve_overall_score = self.cve_overall_score
        cve_severity = self.cve_severity
        cve_type = self.cve_type
        exploit_poc = self.exploit_poc
        masked = self.masked
        node_id = self.node_id
        parsed_attack_vector = self.parsed_attack_vector
        updated_at = self.updated_at
        resources: Union[Unset, None, List[str]] = UNSET
        if not isinstance(self.resources, Unset):
            if self.resources is None:
                resources = None
            else:
                resources = self.resources

        if self.urls is None:
            urls = None
        else:
            urls = self.urls

        field_dict: Dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update(
            {
                "cve_attack_vector": cve_attack_vector,
                "cve_cvss_score": cve_cvss_score,
                "cve_description": cve_description,
                "cve_fixed_in": cve_fixed_in,
                "cve_id": cve_id,
                "cve_link": cve_link,
                "cve_overall_score": cve_overall_score,
                "cve_severity": cve_severity,
                "cve_type": cve_type,
                "exploit_poc": exploit_poc,
                "masked": masked,
                "node_id": node_id,
                "parsed_attack_vector": parsed_attack_vector,
                "updated_at": updated_at,
                "urls": urls,
            }
        )
        if resources is not UNSET:
            field_dict["resources"] = resources

        return field_dict

    @classmethod
    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -> T:
        d = src_dict.copy()
        cve_attack_vector = d.pop("cve_attack_vector")

        cve_cvss_score = d.pop("cve_cvss_score")

        cve_description = d.pop("cve_description")

        cve_fixed_in = d.pop("cve_fixed_in")

        cve_id = d.pop("cve_id")

        cve_link = d.pop("cve_link")

        cve_overall_score = d.pop("cve_overall_score")

        cve_severity = d.pop("cve_severity")

        cve_type = d.pop("cve_type")

        exploit_poc = d.pop("exploit_poc")

        masked = d.pop("masked")

        node_id = d.pop("node_id")

        parsed_attack_vector = d.pop("parsed_attack_vector")

        updated_at = d.pop("updated_at")

        resources = cast(List[str], d.pop("resources", UNSET))

        urls = cast(List[Any], d.pop("urls"))

        model_vulnerability_rule = cls(
            cve_attack_vector=cve_attack_vector,
            cve_cvss_score=cve_cvss_score,
            cve_description=cve_description,
            cve_fixed_in=cve_fixed_in,
            cve_id=cve_id,
            cve_link=cve_link,
            cve_overall_score=cve_overall_score,
            cve_severity=cve_severity,
            cve_type=cve_type,
            exploit_poc=exploit_poc,
            masked=masked,
            node_id=node_id,
            parsed_attack_vector=parsed_attack_vector,
            updated_at=updated_at,
            resources=resources,
            urls=urls,
        )

        model_vulnerability_rule.additional_properties = d
        return model_vulnerability_rule

    @property
    def additional_keys(self) -> List[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
