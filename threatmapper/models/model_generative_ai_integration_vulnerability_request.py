from typing import Any, Dict, List, Type, TypeVar, Union

from attrs import define as _attrs_define
from attrs import field as _attrs_field

from ..models.model_generative_ai_integration_vulnerability_request_query_type import (
    ModelGenerativeAiIntegrationVulnerabilityRequestQueryType,
)
from ..models.model_generative_ai_integration_vulnerability_request_remediation_format import (
    ModelGenerativeAiIntegrationVulnerabilityRequestRemediationFormat,
)
from ..types import UNSET, Unset

T = TypeVar("T", bound="ModelGenerativeAiIntegrationVulnerabilityRequest")


@_attrs_define
class ModelGenerativeAiIntegrationVulnerabilityRequest:
    """
    Example:
        {'integration_id': 0, 'remediation_format': 'all', 'cve_id': 'cve_id', 'cve_type': 'cve_type', 'query_type':
            'remediation', 'cve_caused_by_package': 'cve_caused_by_package'}

    Attributes:
        cve_caused_by_package (str):
        cve_id (str):
        cve_type (str):
        query_type (ModelGenerativeAiIntegrationVulnerabilityRequestQueryType):
        remediation_format (ModelGenerativeAiIntegrationVulnerabilityRequestRemediationFormat):
        integration_id (Union[Unset, int]):
    """

    cve_caused_by_package: str
    cve_id: str
    cve_type: str
    query_type: ModelGenerativeAiIntegrationVulnerabilityRequestQueryType
    remediation_format: ModelGenerativeAiIntegrationVulnerabilityRequestRemediationFormat
    integration_id: Union[Unset, int] = UNSET
    additional_properties: Dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> Dict[str, Any]:
        cve_caused_by_package = self.cve_caused_by_package
        cve_id = self.cve_id
        cve_type = self.cve_type
        query_type = self.query_type.value

        remediation_format = self.remediation_format.value

        integration_id = self.integration_id

        field_dict: Dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update(
            {
                "cve_caused_by_package": cve_caused_by_package,
                "cve_id": cve_id,
                "cve_type": cve_type,
                "query_type": query_type,
                "remediation_format": remediation_format,
            }
        )
        if integration_id is not UNSET:
            field_dict["integration_id"] = integration_id

        return field_dict

    @classmethod
    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -> T:
        d = src_dict.copy()
        cve_caused_by_package = d.pop("cve_caused_by_package")

        cve_id = d.pop("cve_id")

        cve_type = d.pop("cve_type")

        query_type = ModelGenerativeAiIntegrationVulnerabilityRequestQueryType(d.pop("query_type"))

        remediation_format = ModelGenerativeAiIntegrationVulnerabilityRequestRemediationFormat(
            d.pop("remediation_format")
        )

        integration_id = d.pop("integration_id", UNSET)

        model_generative_ai_integration_vulnerability_request = cls(
            cve_caused_by_package=cve_caused_by_package,
            cve_id=cve_id,
            cve_type=cve_type,
            query_type=query_type,
            remediation_format=remediation_format,
            integration_id=integration_id,
        )

        model_generative_ai_integration_vulnerability_request.additional_properties = d
        return model_generative_ai_integration_vulnerability_request

    @property
    def additional_keys(self) -> List[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
