import datetime
from typing import TYPE_CHECKING, Any, Dict, List, Type, TypeVar, Union, cast

from attrs import define as _attrs_define
from attrs import field as _attrs_field
from dateutil.parser import isoparse

from ..types import UNSET, Unset

if TYPE_CHECKING:
    from ..models.ingesters_meta_rules import IngestersMetaRules


T = TypeVar("T", bound="IngestersMalware")


@_attrs_define
class IngestersMalware:
    """
    Example:
        {'summary': 'summary', 'image_layer_id': 'image_layer_id', 'rule_name': 'rule_name', 'file_sev_score':
            0.8008281904610115, 'file_severity': 'file_severity', 'strings_to_match': ['strings_to_match',
            'strings_to_match'], 'meta': ['meta', 'meta'], 'complete_filename': 'complete_filename', 'scan_id': 'scan_id',
            'class': 'class', 'meta_rules': {'date': 'date', 'reference': 'reference', 'rule_id': 'rule_id', 'filetype':
            'filetype', 'rule_name': 'rule_name', 'author': 'author', 'file_severity': 'file_severity', 'description':
            'description', 'version': 'version', 'info': 'info'}, 'severity_score': 6, 'timestamp': datetime.datetime(2000,
            1, 23, 4, 56, 7, tzinfo=datetime.timezone.utc)}

    Attributes:
        class_ (Union[Unset, str]):
        complete_filename (Union[Unset, str]):
        file_sev_score (Union[Unset, float]):
        file_severity (Union[Unset, str]):
        image_layer_id (Union[Unset, str]):
        meta (Union[Unset, None, List[str]]):
        meta_rules (Union[Unset, IngestersMetaRules]):  Example: {'date': 'date', 'reference': 'reference', 'rule_id':
            'rule_id', 'filetype': 'filetype', 'rule_name': 'rule_name', 'author': 'author', 'file_severity':
            'file_severity', 'description': 'description', 'version': 'version', 'info': 'info'}.
        rule_name (Union[Unset, str]):
        scan_id (Union[Unset, str]):
        severity_score (Union[Unset, int]):
        strings_to_match (Union[Unset, None, List[str]]):
        summary (Union[Unset, str]):
        timestamp (Union[Unset, datetime.datetime]):
    """

    class_: Union[Unset, str] = UNSET
    complete_filename: Union[Unset, str] = UNSET
    file_sev_score: Union[Unset, float] = UNSET
    file_severity: Union[Unset, str] = UNSET
    image_layer_id: Union[Unset, str] = UNSET
    meta: Union[Unset, None, List[str]] = UNSET
    meta_rules: Union[Unset, "IngestersMetaRules"] = UNSET
    rule_name: Union[Unset, str] = UNSET
    scan_id: Union[Unset, str] = UNSET
    severity_score: Union[Unset, int] = UNSET
    strings_to_match: Union[Unset, None, List[str]] = UNSET
    summary: Union[Unset, str] = UNSET
    timestamp: Union[Unset, datetime.datetime] = UNSET
    additional_properties: Dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> Dict[str, Any]:
        class_ = self.class_
        complete_filename = self.complete_filename
        file_sev_score = self.file_sev_score
        file_severity = self.file_severity
        image_layer_id = self.image_layer_id
        meta: Union[Unset, None, List[str]] = UNSET
        if not isinstance(self.meta, Unset):
            if self.meta is None:
                meta = None
            else:
                meta = self.meta

        meta_rules: Union[Unset, Dict[str, Any]] = UNSET
        if not isinstance(self.meta_rules, Unset):
            meta_rules = self.meta_rules.to_dict()

        rule_name = self.rule_name
        scan_id = self.scan_id
        severity_score = self.severity_score
        strings_to_match: Union[Unset, None, List[str]] = UNSET
        if not isinstance(self.strings_to_match, Unset):
            if self.strings_to_match is None:
                strings_to_match = None
            else:
                strings_to_match = self.strings_to_match

        summary = self.summary
        timestamp: Union[Unset, str] = UNSET
        if not isinstance(self.timestamp, Unset):
            timestamp = self.timestamp.isoformat()

        field_dict: Dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update({})
        if class_ is not UNSET:
            field_dict["class"] = class_
        if complete_filename is not UNSET:
            field_dict["complete_filename"] = complete_filename
        if file_sev_score is not UNSET:
            field_dict["file_sev_score"] = file_sev_score
        if file_severity is not UNSET:
            field_dict["file_severity"] = file_severity
        if image_layer_id is not UNSET:
            field_dict["image_layer_id"] = image_layer_id
        if meta is not UNSET:
            field_dict["meta"] = meta
        if meta_rules is not UNSET:
            field_dict["meta_rules"] = meta_rules
        if rule_name is not UNSET:
            field_dict["rule_name"] = rule_name
        if scan_id is not UNSET:
            field_dict["scan_id"] = scan_id
        if severity_score is not UNSET:
            field_dict["severity_score"] = severity_score
        if strings_to_match is not UNSET:
            field_dict["strings_to_match"] = strings_to_match
        if summary is not UNSET:
            field_dict["summary"] = summary
        if timestamp is not UNSET:
            field_dict["timestamp"] = timestamp

        return field_dict

    @classmethod
    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -> T:
        from ..models.ingesters_meta_rules import IngestersMetaRules

        d = src_dict.copy()
        class_ = d.pop("class", UNSET)

        complete_filename = d.pop("complete_filename", UNSET)

        file_sev_score = d.pop("file_sev_score", UNSET)

        file_severity = d.pop("file_severity", UNSET)

        image_layer_id = d.pop("image_layer_id", UNSET)

        meta = cast(List[str], d.pop("meta", UNSET))

        _meta_rules = d.pop("meta_rules", UNSET)
        meta_rules: Union[Unset, IngestersMetaRules]
        if isinstance(_meta_rules, Unset):
            meta_rules = UNSET
        else:
            meta_rules = IngestersMetaRules.from_dict(_meta_rules)

        rule_name = d.pop("rule_name", UNSET)

        scan_id = d.pop("scan_id", UNSET)

        severity_score = d.pop("severity_score", UNSET)

        strings_to_match = cast(List[str], d.pop("strings_to_match", UNSET))

        summary = d.pop("summary", UNSET)

        _timestamp = d.pop("timestamp", UNSET)
        timestamp: Union[Unset, datetime.datetime]
        if isinstance(_timestamp, Unset):
            timestamp = UNSET
        else:
            timestamp = isoparse(_timestamp)

        ingesters_malware = cls(
            class_=class_,
            complete_filename=complete_filename,
            file_sev_score=file_sev_score,
            file_severity=file_severity,
            image_layer_id=image_layer_id,
            meta=meta,
            meta_rules=meta_rules,
            rule_name=rule_name,
            scan_id=scan_id,
            severity_score=severity_score,
            strings_to_match=strings_to_match,
            summary=summary,
            timestamp=timestamp,
        )

        ingesters_malware.additional_properties = d
        return ingesters_malware

    @property
    def additional_keys(self) -> List[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
