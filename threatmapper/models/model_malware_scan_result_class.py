from typing import Any, Dict, List, Type, TypeVar, Union, cast

from attrs import define as _attrs_define
from attrs import field as _attrs_field

T = TypeVar("T", bound="ModelMalwareScanResultClass")


@_attrs_define
class ModelMalwareScanResultClass:
    """
    Attributes:
        class_ (Union[List[str], None]):
    """

    class_: Union[List[str], None]
    additional_properties: Dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> Dict[str, Any]:
        class_: Union[List[str], None]
        if isinstance(self.class_, list):
            class_ = self.class_

        else:
            class_ = self.class_

        field_dict: Dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update(
            {
                "class": class_,
            }
        )

        return field_dict

    @classmethod
    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -> T:
        d = src_dict.copy()

        def _parse_class_(data: object) -> Union[List[str], None]:
            if data is None:
                return data
            try:
                if not isinstance(data, list):
                    raise TypeError()
                class_type_0 = cast(List[str], data)

                return class_type_0
            except:  # noqa: E722
                pass
            return cast(Union[List[str], None], data)

        class_ = _parse_class_(d.pop("class"))

        model_malware_scan_result_class = cls(
            class_=class_,
        )

        model_malware_scan_result_class.additional_properties = d
        return model_malware_scan_result_class

    @property
    def additional_keys(self) -> List[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
