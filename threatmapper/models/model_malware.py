from typing import Any, Dict, List, Type, TypeVar, Union, cast

from attrs import define as _attrs_define
from attrs import field as _attrs_field

from ..types import UNSET, Unset

T = TypeVar("T", bound="ModelMalware")


@_attrs_define
class ModelMalware:
    """
    Example:
        {'date': 'date', 'summary': 'summary', 'filetype': 'filetype', 'image_layer_id': 'image_layer_id', 'rule_name':
            'rule_name', 'author': 'author', 'masked': True, 'file_sev_score': 0, 'file_severity': 'file_severity',
            'strings_to_match': ['', ''], 'description': 'description', 'resources': ['resources', 'resources'], 'version':
            'version', 'rule_id': 'rule_id', 'complete_filename': 'complete_filename', 'class': 'class', 'info': 'info',
            'node_id': 'node_id', 'severity_score': 6}

    Attributes:
        class_ (str):
        complete_filename (str):
        file_sev_score (int):
        file_severity (str):
        image_layer_id (str):
        masked (bool):
        node_id (str):
        rule_id (str):
        rule_name (str):
        author (Union[Unset, str]):
        date (Union[Unset, str]):
        description (Union[Unset, str]):
        filetype (Union[Unset, str]):
        info (Union[Unset, str]):
        resources (Union[Unset, None, List[str]]):
        severity_score (Union[Unset, int]):
        strings_to_match (Union[Unset, None, List[Any]]):
        summary (Union[Unset, str]):
        version (Union[Unset, str]):
    """

    class_: str
    complete_filename: str
    file_sev_score: int
    file_severity: str
    image_layer_id: str
    masked: bool
    node_id: str
    rule_id: str
    rule_name: str
    author: Union[Unset, str] = UNSET
    date: Union[Unset, str] = UNSET
    description: Union[Unset, str] = UNSET
    filetype: Union[Unset, str] = UNSET
    info: Union[Unset, str] = UNSET
    resources: Union[Unset, None, List[str]] = UNSET
    severity_score: Union[Unset, int] = UNSET
    strings_to_match: Union[Unset, None, List[Any]] = UNSET
    summary: Union[Unset, str] = UNSET
    version: Union[Unset, str] = UNSET
    additional_properties: Dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> Dict[str, Any]:
        class_ = self.class_
        complete_filename = self.complete_filename
        file_sev_score = self.file_sev_score
        file_severity = self.file_severity
        image_layer_id = self.image_layer_id
        masked = self.masked
        node_id = self.node_id
        rule_id = self.rule_id
        rule_name = self.rule_name
        author = self.author
        date = self.date
        description = self.description
        filetype = self.filetype
        info = self.info
        resources: Union[Unset, None, List[str]] = UNSET
        if not isinstance(self.resources, Unset):
            if self.resources is None:
                resources = None
            else:
                resources = self.resources

        severity_score = self.severity_score
        strings_to_match: Union[Unset, None, List[Any]] = UNSET
        if not isinstance(self.strings_to_match, Unset):
            if self.strings_to_match is None:
                strings_to_match = None
            else:
                strings_to_match = self.strings_to_match

        summary = self.summary
        version = self.version

        field_dict: Dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update(
            {
                "class": class_,
                "complete_filename": complete_filename,
                "file_sev_score": file_sev_score,
                "file_severity": file_severity,
                "image_layer_id": image_layer_id,
                "masked": masked,
                "node_id": node_id,
                "rule_id": rule_id,
                "rule_name": rule_name,
            }
        )
        if author is not UNSET:
            field_dict["author"] = author
        if date is not UNSET:
            field_dict["date"] = date
        if description is not UNSET:
            field_dict["description"] = description
        if filetype is not UNSET:
            field_dict["filetype"] = filetype
        if info is not UNSET:
            field_dict["info"] = info
        if resources is not UNSET:
            field_dict["resources"] = resources
        if severity_score is not UNSET:
            field_dict["severity_score"] = severity_score
        if strings_to_match is not UNSET:
            field_dict["strings_to_match"] = strings_to_match
        if summary is not UNSET:
            field_dict["summary"] = summary
        if version is not UNSET:
            field_dict["version"] = version

        return field_dict

    @classmethod
    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -> T:
        d = src_dict.copy()
        class_ = d.pop("class")

        complete_filename = d.pop("complete_filename")

        file_sev_score = d.pop("file_sev_score")

        file_severity = d.pop("file_severity")

        image_layer_id = d.pop("image_layer_id")

        masked = d.pop("masked")

        node_id = d.pop("node_id")

        rule_id = d.pop("rule_id")

        rule_name = d.pop("rule_name")

        author = d.pop("author", UNSET)

        date = d.pop("date", UNSET)

        description = d.pop("description", UNSET)

        filetype = d.pop("filetype", UNSET)

        info = d.pop("info", UNSET)

        resources = cast(List[str], d.pop("resources", UNSET))

        severity_score = d.pop("severity_score", UNSET)

        strings_to_match = cast(List[Any], d.pop("strings_to_match", UNSET))

        summary = d.pop("summary", UNSET)

        version = d.pop("version", UNSET)

        model_malware = cls(
            class_=class_,
            complete_filename=complete_filename,
            file_sev_score=file_sev_score,
            file_severity=file_severity,
            image_layer_id=image_layer_id,
            masked=masked,
            node_id=node_id,
            rule_id=rule_id,
            rule_name=rule_name,
            author=author,
            date=date,
            description=description,
            filetype=filetype,
            info=info,
            resources=resources,
            severity_score=severity_score,
            strings_to_match=strings_to_match,
            summary=summary,
            version=version,
        )

        model_malware.additional_properties = d
        return model_malware

    @property
    def additional_keys(self) -> List[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
