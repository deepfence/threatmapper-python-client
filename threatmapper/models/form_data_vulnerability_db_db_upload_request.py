from io import BytesIO
from typing import Any, Dict, List, Optional, Type, TypeVar

from attrs import define as _attrs_define
from attrs import field as _attrs_field

from ..types import File

T = TypeVar("T", bound="FormDataVulnerabilityDbDBUploadRequest")


@_attrs_define
class FormDataVulnerabilityDbDBUploadRequest:
    """
    Attributes:
        database (Optional[File]):
    """

    database: Optional[File]
    additional_properties: Dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> Dict[str, Any]:
        database = self.database.to_tuple() if self.database else None

        field_dict: Dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update(
            {
                "database": database,
            }
        )

        return field_dict

    def to_multipart(self) -> Dict[str, Any]:
        database = self.database.to_tuple() if self.database else None

        field_dict: Dict[str, Any] = {}
        field_dict.update(
            {key: (None, str(value).encode(), "text/plain") for key, value in self.additional_properties.items()}
        )
        field_dict.update(
            {
                "database": database,
            }
        )

        return field_dict

    @classmethod
    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -> T:
        d = src_dict.copy()
        _database = d.pop("database")
        database: Optional[File]
        if _database is None:
            database = None
        else:
            database = File(payload=BytesIO(_database))

        form_data_vulnerability_db_db_upload_request = cls(
            database=database,
        )

        form_data_vulnerability_db_db_upload_request.additional_properties = d
        return form_data_vulnerability_db_db_upload_request

    @property
    def additional_keys(self) -> List[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
