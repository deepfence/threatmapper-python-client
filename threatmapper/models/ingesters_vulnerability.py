from typing import Any, Dict, List, Type, TypeVar, Union, cast

from attrs import define as _attrs_define
from attrs import field as _attrs_field

from ..types import UNSET, Unset

T = TypeVar("T", bound="IngestersVulnerability")


@_attrs_define
class IngestersVulnerability:
    """
    Example:
        {'parsed_attack_vector': 'parsed_attack_vector', 'cve_container_layer': 'cve_container_layer',
            'cve_description': 'cve_description', 'cve_overall_score': 6.027456183070403, 'cve_caused_by_package':
            'cve_caused_by_package', 'cve_attack_vector': 'cve_attack_vector', 'cve_cvss_score': 0.8008281904610115, 'urls':
            ['urls', 'urls'], 'cve_severity': 'cve_severity', 'cve_caused_by_package_path': 'cve_caused_by_package_path',
            'cve_id': 'cve_id', 'exploit_poc': 'exploit_poc', 'cve_type': 'cve_type', 'has_live_connection': True,
            'cve_fixed_in': 'cve_fixed_in', 'init_exploitability_score': 5, 'scan_id': 'scan_id', 'cve_link': 'cve_link',
            'exploitability_score': 1}

    Attributes:
        cve_attack_vector (Union[Unset, str]):
        cve_caused_by_package (Union[Unset, str]):
        cve_caused_by_package_path (Union[Unset, str]):
        cve_container_layer (Union[Unset, str]):
        cve_cvss_score (Union[Unset, float]):
        cve_description (Union[Unset, str]):
        cve_fixed_in (Union[Unset, str]):
        cve_id (Union[Unset, str]):
        cve_link (Union[Unset, str]):
        cve_overall_score (Union[Unset, float]):
        cve_severity (Union[Unset, str]):
        cve_type (Union[Unset, str]):
        exploit_poc (Union[Unset, str]):
        exploitability_score (Union[Unset, int]):
        has_live_connection (Union[Unset, bool]):
        init_exploitability_score (Union[Unset, int]):
        parsed_attack_vector (Union[Unset, str]):
        scan_id (Union[Unset, str]):
        urls (Union[List[str], None, Unset]):
    """

    cve_attack_vector: Union[Unset, str] = UNSET
    cve_caused_by_package: Union[Unset, str] = UNSET
    cve_caused_by_package_path: Union[Unset, str] = UNSET
    cve_container_layer: Union[Unset, str] = UNSET
    cve_cvss_score: Union[Unset, float] = UNSET
    cve_description: Union[Unset, str] = UNSET
    cve_fixed_in: Union[Unset, str] = UNSET
    cve_id: Union[Unset, str] = UNSET
    cve_link: Union[Unset, str] = UNSET
    cve_overall_score: Union[Unset, float] = UNSET
    cve_severity: Union[Unset, str] = UNSET
    cve_type: Union[Unset, str] = UNSET
    exploit_poc: Union[Unset, str] = UNSET
    exploitability_score: Union[Unset, int] = UNSET
    has_live_connection: Union[Unset, bool] = UNSET
    init_exploitability_score: Union[Unset, int] = UNSET
    parsed_attack_vector: Union[Unset, str] = UNSET
    scan_id: Union[Unset, str] = UNSET
    urls: Union[List[str], None, Unset] = UNSET
    additional_properties: Dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> Dict[str, Any]:
        cve_attack_vector = self.cve_attack_vector

        cve_caused_by_package = self.cve_caused_by_package

        cve_caused_by_package_path = self.cve_caused_by_package_path

        cve_container_layer = self.cve_container_layer

        cve_cvss_score = self.cve_cvss_score

        cve_description = self.cve_description

        cve_fixed_in = self.cve_fixed_in

        cve_id = self.cve_id

        cve_link = self.cve_link

        cve_overall_score = self.cve_overall_score

        cve_severity = self.cve_severity

        cve_type = self.cve_type

        exploit_poc = self.exploit_poc

        exploitability_score = self.exploitability_score

        has_live_connection = self.has_live_connection

        init_exploitability_score = self.init_exploitability_score

        parsed_attack_vector = self.parsed_attack_vector

        scan_id = self.scan_id

        urls: Union[List[str], None, Unset]
        if isinstance(self.urls, Unset):
            urls = UNSET
        elif isinstance(self.urls, list):
            urls = self.urls

        else:
            urls = self.urls

        field_dict: Dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update({})
        if cve_attack_vector is not UNSET:
            field_dict["cve_attack_vector"] = cve_attack_vector
        if cve_caused_by_package is not UNSET:
            field_dict["cve_caused_by_package"] = cve_caused_by_package
        if cve_caused_by_package_path is not UNSET:
            field_dict["cve_caused_by_package_path"] = cve_caused_by_package_path
        if cve_container_layer is not UNSET:
            field_dict["cve_container_layer"] = cve_container_layer
        if cve_cvss_score is not UNSET:
            field_dict["cve_cvss_score"] = cve_cvss_score
        if cve_description is not UNSET:
            field_dict["cve_description"] = cve_description
        if cve_fixed_in is not UNSET:
            field_dict["cve_fixed_in"] = cve_fixed_in
        if cve_id is not UNSET:
            field_dict["cve_id"] = cve_id
        if cve_link is not UNSET:
            field_dict["cve_link"] = cve_link
        if cve_overall_score is not UNSET:
            field_dict["cve_overall_score"] = cve_overall_score
        if cve_severity is not UNSET:
            field_dict["cve_severity"] = cve_severity
        if cve_type is not UNSET:
            field_dict["cve_type"] = cve_type
        if exploit_poc is not UNSET:
            field_dict["exploit_poc"] = exploit_poc
        if exploitability_score is not UNSET:
            field_dict["exploitability_score"] = exploitability_score
        if has_live_connection is not UNSET:
            field_dict["has_live_connection"] = has_live_connection
        if init_exploitability_score is not UNSET:
            field_dict["init_exploitability_score"] = init_exploitability_score
        if parsed_attack_vector is not UNSET:
            field_dict["parsed_attack_vector"] = parsed_attack_vector
        if scan_id is not UNSET:
            field_dict["scan_id"] = scan_id
        if urls is not UNSET:
            field_dict["urls"] = urls

        return field_dict

    @classmethod
    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -> T:
        d = src_dict.copy()
        cve_attack_vector = d.pop("cve_attack_vector", UNSET)

        cve_caused_by_package = d.pop("cve_caused_by_package", UNSET)

        cve_caused_by_package_path = d.pop("cve_caused_by_package_path", UNSET)

        cve_container_layer = d.pop("cve_container_layer", UNSET)

        cve_cvss_score = d.pop("cve_cvss_score", UNSET)

        cve_description = d.pop("cve_description", UNSET)

        cve_fixed_in = d.pop("cve_fixed_in", UNSET)

        cve_id = d.pop("cve_id", UNSET)

        cve_link = d.pop("cve_link", UNSET)

        cve_overall_score = d.pop("cve_overall_score", UNSET)

        cve_severity = d.pop("cve_severity", UNSET)

        cve_type = d.pop("cve_type", UNSET)

        exploit_poc = d.pop("exploit_poc", UNSET)

        exploitability_score = d.pop("exploitability_score", UNSET)

        has_live_connection = d.pop("has_live_connection", UNSET)

        init_exploitability_score = d.pop("init_exploitability_score", UNSET)

        parsed_attack_vector = d.pop("parsed_attack_vector", UNSET)

        scan_id = d.pop("scan_id", UNSET)

        def _parse_urls(data: object) -> Union[List[str], None, Unset]:
            if data is None:
                return data
            if isinstance(data, Unset):
                return data
            try:
                if not isinstance(data, list):
                    raise TypeError()
                urls_type_0 = cast(List[str], data)

                return urls_type_0
            except:  # noqa: E722
                pass
            return cast(Union[List[str], None, Unset], data)

        urls = _parse_urls(d.pop("urls", UNSET))

        ingesters_vulnerability = cls(
            cve_attack_vector=cve_attack_vector,
            cve_caused_by_package=cve_caused_by_package,
            cve_caused_by_package_path=cve_caused_by_package_path,
            cve_container_layer=cve_container_layer,
            cve_cvss_score=cve_cvss_score,
            cve_description=cve_description,
            cve_fixed_in=cve_fixed_in,
            cve_id=cve_id,
            cve_link=cve_link,
            cve_overall_score=cve_overall_score,
            cve_severity=cve_severity,
            cve_type=cve_type,
            exploit_poc=exploit_poc,
            exploitability_score=exploitability_score,
            has_live_connection=has_live_connection,
            init_exploitability_score=init_exploitability_score,
            parsed_attack_vector=parsed_attack_vector,
            scan_id=scan_id,
            urls=urls,
        )

        ingesters_vulnerability.additional_properties = d
        return ingesters_vulnerability

    @property
    def additional_keys(self) -> List[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
